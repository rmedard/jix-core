<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\jix_settings\Form\SocialMediaSettingsForm;
use Drupal\jix_settings\Plugin\Field\AliasUrlComputedField;
use Drupal\jix_settings\Plugin\Field\EmployerLogoUrlComputedField;
use Drupal\jix_settings\Plugin\Field\JobAttachmentUrlComputedField;
use Drupal\jix_settings\Plugin\Field\JobCategoryComputedField;
use Drupal\jix_settings\Plugin\Field\JobDesiredExperienceComputedField;
use Drupal\jix_settings\Plugin\Field\JobEducationLevelComputedField;
use Drupal\jix_settings\Plugin\Field\JobEmployerIdComputedField;
use Drupal\jix_settings\Plugin\Field\NodeViewsCountComputedField;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function jix_settings_theme($existing, $type, $theme, $path): array
{
  return [
    'jix_settings_manager' => ['variables' => []],
    'jix_data_manager' => ['variables' => []]
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function jix_settings_views_query_alter(ViewExecutable $view, QueryPluginBase $query): void
{
  if ($view->storage->id() === 'job_applications' &&
      ($view->current_display === 'page_job_applications_management' || $view->current_display === 'data_export_applications')) {
    if ($query instanceof Sql) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if (str_contains($condition['field'], 'webform_submission.created')) {
            adjustDayHoursInterval($condition);
            break;
          }
        }
      }
    }
  }

  if ($view->storage->id() === 'jobs_management_board' && $view->current_display === 'page_jobs_management') {
    if ($query instanceof Sql) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if (str_contains($condition['field'], 'node_field_data.created')) {
            adjustDayHoursInterval($condition);
            break;
          }
        }
      }
    }
  }
}

function adjustDayHoursInterval(array &$condition): void
{
  $formula_parts = explode(' ', $condition['field']);
  $from = DrupalDateTime::createFromTimestamp(intval($formula_parts[2]));
  $to = DrupalDateTime::createFromTimestamp(intval($formula_parts[4]));
  $formula_parts[2] = $from->setTime(0, 0)->getTimestamp();
  $formula_parts[4] = $to->setTime(23, 59, 59)->getTimestamp();
  $condition['field'] = implode(' ', $formula_parts);
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function jix_settings_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type): void
{
  if ($entity_type->id() == 'node') {
    $fields['alias_url'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Alias Url'))
      ->setName(t('Alias Url'))
      ->setDescription(t('This is the alias url of the node'))
      ->setComputed(true)
      ->setClass(AliasUrlComputedField::class);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function jix_settings_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle): void
{
  if ($entity_type->id() == 'node' && $bundle == 'job') {
    $fields['field_job_category__computed'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Job Category'))
      ->setName(t('Computed Job Category'))
      ->setDescription(t('This is the job category'))
      ->setComputed(true)
      ->setClass(JobCategoryComputedField::class);

    $fields['field_job_desired_experience__computed'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Job Desired Experience'))
      ->setName(t('Computed Job Desired Experience'))
      ->setDescription(t('Desired experience for this job'))
      ->setComputed(true)
      ->setClass(JobDesiredExperienceComputedField::class);

    $fields['field_job_education_level__computed'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Job Desired Education Level'))
      ->setName(t('Computed Job Desired Education Level'))
      ->setDescription(t('Desired education level for this job'))
      ->setComputed(true)
      ->setClass(JobEducationLevelComputedField::class);

    $fields['field_job_attachment__computed'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Job Attachment Uri'))
      ->setName(t('Computed Job Attachment Uri'))
      ->setDescription(t('Computed Job Attachment Uri'))
      ->setComputed(true)
      ->setClass(JobAttachmentUrlComputedField::class);

    $fields['field_job_employer_id'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Job Employer'))
      ->setName(t('Computed Job Employer'))
      ->setDescription(t('Identifier of the employer owning this job'))
      ->setComputed(true)
      ->setClass(JobEmployerIdComputedField::class);

    $fields['views_count'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Views Count'))
      ->setName(t('Views Count'))
      ->setDescription(t('The number of times a job has been viewed'))
      ->setComputed(true)
      ->setClass(NodeViewsCountComputedField::class);
  }

  if ($entity_type->id() == 'node' && $bundle == 'employer') {
    $fields['field_employer_logo__computed'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Employer Logo Uri'))
      ->setName(t('Computed Employer Logo Uri'))
      ->setDescription(t('Computed Employer Logo Uri'))
      ->setComputed(true)
      ->setClass(EmployerLogoUrlComputedField::class);
  }
}

/**
 * Implements hook_token_info().
 */
function jix_settings_token_info(): array
{
  $info['tokens']['site']['phone'] = [
    'name' => 'Phone Number',
    'description' => t('The main phone number of the site'),
  ];
  $info['tokens']['site']['facebook'] = [
    'name' => 'Facebook Account',
    'description' => t('The main facebook account of the site'),
  ];
  $info['tokens']['site']['linkedin'] = [
    'name' => 'Linkedin Account',
    'description' => t('The main linkedin account of the site'),
  ];
  $info['tokens']['site']['twitter'] = [
    'name' => 'Twitter Account',
    'description' => t('The main twitter account of the site'),
  ];
  $info['tokens']['site']['youtube'] = [
    'name' => 'Youtube Channel',
    'description' => t('The main youtube channel of the site'),
  ];
  $info['tokens']['site']['instagram'] = [
    'name' => 'Instagram Account',
    'description' => t('The main instagram account of the site'),
  ];
  $info['tokens']['site']['whatsapp'] = [
    'name' => 'Whatsapp Call Account',
    'description' => t('The main whatsapp account for calls'),
  ];
  return $info;
}

/**
 * Implements hook_tokens().
 */
function jix_settings_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata): array
{
  $replacements = [];
  $socialMediaConfig = Drupal::config(SocialMediaSettingsForm::SETTINGS);
  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'phone':
        $text = Drupal::config('system.site')->get('phone');
        $replacements[$original] = $text;
        break;
      case 'facebook':
        $text = $socialMediaConfig->get('facebook_page');
        $replacements[$original] = $text;
        break;
      case 'linkedin':
        $text = $socialMediaConfig->get('linkedin_page');
        $replacements[$original] = $text;
        break;
      case 'twitter':
        $text = $socialMediaConfig->get('twitter_page');
        $replacements[$original] = $text;
        break;
      case 'youtube':
        $text = $socialMediaConfig->get('youtube_page');
        $replacements[$original] = $text;
        break;
      case 'instagram':
        $text = $socialMediaConfig->get('instagram_page');
        $replacements[$original] = $text;
        break;
      case 'whatsapp':
        $text = $socialMediaConfig->get('whatsapp_call_link');
        $replacements[$original] = $text;
        break;
    }
  }
  return $replacements;
}
