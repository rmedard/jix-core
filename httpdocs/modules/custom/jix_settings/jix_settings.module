<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\jix_settings\Plugin\Field\AliasUrlComputedField;
use Drupal\jix_settings\Plugin\Field\JobCategoryComputedField;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\Plugin\views\query\Sql;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function jix_settings_theme($existing, $type, $theme, $path): array
{
  return [
    'jix_settings_manager' => ['variables' => []],
    'jix_data_manager' => ['variables' => []]
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function jix_settings_views_query_alter(ViewExecutable $view, QueryPluginBase $query)
{
  if ($view->storage->id() === 'job_applications' && $view->current_display === 'page_job_applications_management') {
    if ($query instanceof Sql) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if (strpos($condition['field'], 'webform_submission.created') !== FALSE) {
            adjustDayHoursInterval($condition);
            break;
          }
        }
      }
    }
  }

  if ($view->storage->id() === 'jobs_management_board' && $view->current_display === 'page_jobs_management') {
    if ($query instanceof Sql) {
      foreach ($query->where as &$condition_group) {
        foreach ($condition_group['conditions'] as &$condition) {
          if (strpos($condition['field'], 'node_field_data.created') !== FALSE) {
            adjustDayHoursInterval($condition);
            break;
          }
        }
      }
    }
  }
}

function adjustDayHoursInterval(array &$condition) {
  $formula_parts = explode(' ', $condition['field']);
  $from = DrupalDateTime::createFromTimestamp(intval($formula_parts[2]));
  $to = DrupalDateTime::createFromTimestamp(intval($formula_parts[4]));
  $formula_parts[2] = $from->setTime(0, 0)->getTimestamp();
  $formula_parts[4] = $to->setTime(23, 59, 59)->getTimestamp();
  $condition['field'] = implode(' ', $formula_parts);
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function jix_settings_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type)
{
  if ($entity_type->id() == 'node') {
    $fields['alias_url'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Alias Url'))
      ->setName(t('Alias Url'))
      ->setDescription(t('This is the alias url of the node'))
      ->setComputed(true)
      ->setClass(AliasUrlComputedField::class);
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function jix_settings_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle)
{
  if ($entity_type->id() == 'node' && $bundle == 'job') {
    $fields['field_job_category__computed'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Computed Job Category'))
      ->setName(t('Computed Job Category'))
      ->setDescription(t('This is the job category'))
      ->setComputed(true)
      ->setClass(JobCategoryComputedField::class);
  }
}
