<?php
/**
 * @file
 * A description of what your module does.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function jix_notifier_theme($existing, $type, $theme, $path): array
{
  return [

  ];
}

/**
 * Implements hook_mail().
 * @param $key
 * @param $message
 * @param $params
 */
function jix_notifier_mail($key, &$message, $params): void
{
  $message['from'] = Drupal::config('system.site')
      ->get('name') . ' <' . Drupal::config('system.site')->get('mail') . '>';
  if (array_key_exists('cc', $params)) {
    $message['headers']['Cc'] = $params['cc'];
  }
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['message'];
}

/**
 * Implements hook_cron().
 */
function jix_notifier_cron(): void
{
  unpublishExpiredJobs();
}

function unpublishExpiredJobs(): void
{
  $channel = 'jix_notifier';
  Drupal::logger($channel)->info("UnPublishing expired jobs started!!");
  try {
    $storage = Drupal::entityTypeManager()->getStorage('node');
    $now = new DrupalDateTime('now');
    $query = $storage->getQuery()->condition('type', 'job')
      ->condition('status', NodeInterface::PUBLISHED)
      ->condition('field_job_application_deadline', $now->format(DateTimeItemInterface::DATETIME_STORAGE_FORMAT), '<');
    $expiredJobIds = $query->execute();
    if (isset($expiredJobIds) and count($expiredJobIds) > 0) {
      $expiredJobs = $storage->loadMultiple($expiredJobIds);
      foreach ($expiredJobs as $jobId => $expiredJob) {
        if ($expiredJob instanceof NodeInterface) {
          $expiredJob->setUnpublished();
          $expiredJob->save();
          Drupal::logger($channel)->info(t('Expired job @id unpublished', ['@id' => $jobId]));
        }
      }
    } else {
      Drupal::logger($channel)->info("No expired jobs to unPublish");
    }
  } catch (InvalidPluginDefinitionException $e) {
    Drupal::logger($channel)->error("Plugin definition exception: " . $e->getMessage());
  } catch (PluginNotFoundException $e) {
    Drupal::logger($channel)->error("Plugin not found exception: " . $e->getMessage());
  } catch (EntityStorageException $e) {
    Drupal::logger($channel)->error("Unpublishing node failed: " . $e->getMessage());
  }
}
