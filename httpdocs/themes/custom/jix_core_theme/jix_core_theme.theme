<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\TypedData\Exception\MissingDataException;
use Drupal\jix_settings\Form\WebsiteSettingsForm;
use Drupal\link\LinkItemInterface;
use Drupal\node\NodeInterface;
use Drupal\views\ResultRow;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 * @param $form
 * @param FormStateInterface $form_state
 */
function jix_core_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state): void
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );

  $form['layout']['sidebar_first']['bootstrap_barrio_sidebar_first_width']['#options'][5] = t('5 cols');
  $form['layout']['sidebar_first']['bootstrap_barrio_sidebar_first_width']['#options'][6] = t('6 cols');

  $form['layout']['sidebar_second']['bootstrap_barrio_sidebar_second_width']['#options'][5] = t('5 cols');
  $form['layout']['sidebar_second']['bootstrap_barrio_sidebar_second_width']['#options'][6] = t('6 cols');

  $form['layout']['jix_horizontal_sidebar'] = [
    '#type' => 'details',
    '#title' => t('Jix Horizontal Sidebar Layout'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  ];

  $form['layout']['jix_horizontal_sidebar']['jix_both_sidebars_width'] = [
    '#type' => 'select',
    '#title' => t('Jix Both Sidebars width'),
    '#default_value' => theme_get_setting('jix_both_sidebars_width'),
    '#options' => [
      2 => t('2 cols'),
      3 => t('3 cols'),
      4 => t('4 cols'),
      5 => t('5 cols'),
      6 => t('6 cols'),
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function jix_core_theme_theme_suggestions_form_element_alter(array &$suggestions, array $variables): void
{
  $formId = $variables['element']['#id'] ?? null;
  if ($formId) {
    $suggestions[] = 'form__' . str_replace('-', '_', $formId);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_select(&$variables): void
{
  $variables['attributes']['class'][] = 'custom-select';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_node(&$variables): void
{
  if (boolval($variables['teaser']) === true) {
    $node = $variables['node'];
    if ($node instanceof NodeInterface and $node->bundle() === 'job') {
      $themingService = Drupal::service('jix_interface.theming_service');
      $variables['content']['is_super_featured'] = boolval($node->get('field_job_super_featured')->value);
      $variables['content']['offer_type_badge'] = ['#markup' => $themingService->getOfferTypePill($node)];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_container(&$variables): void
{
  if (is_array($variables['attributes']) && array_key_exists('data-drupal-selector', $variables['attributes'])) {

    /**
     * Define classes
     */
    if (array_key_exists('class', $variables['attributes'])) {
      $classes = $variables['attributes']['class'];
      $selector = $variables['attributes']['data-drupal-selector'];
      if ($selector === 'edit-actions') {
        $type = $variables['element']['#type'];
        if (is_array($type) && in_array($type, ['actions', 'webform_actions'])) {
          $classes[] = 'd-block';
        }
      }

      if ($selector === 'edit-field-employer-sector-wrapper') {
        $classes[] = 'col-md-7';
      }

      $growable = [
        'edit-field-job-offer-type-wrapper',
        'edit-field-job-contract-type-wrapper',
        'edit-field-job-category-wrapper'
      ];

      if (in_array($selector, $growable)) {
        $classes[] = 'flex-grow-1';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_input(&$variables): void
{
  $element = $variables['element'];
  if (is_array($element) && array_key_exists('#id', $element)) {
    if ($element['#id'] === 'edit-submit') {
      $variables['attributes']['class'][] = 'col-4';
    }
    if (in_array($element['#id'], ['edit-submit-jobs-display', 'edit-actions-submit'])) {
      $variables['attributes']['class'][] = 'col-12';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_datetime_form(&$variables): void
{
  $variables['attributes']['class'][] = 'd-flex gap-1';
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function jix_core_theme_preprocess_page(&$variables): void
{
  $routeName = Drupal::routeMatch()->getRouteName();
  $requestUri = Drupal::request()->getRequestUri();
  $variables['navbar_top_attributes']['class'] = ['navbar', 'navbar-light', 'bg-white', 'shadow-sm'];
  $fullSizePages = ['/post-advert'];
  if (in_array($requestUri, $fullSizePages) or preg_match('(jix_interface\.40.*)', $routeName)) {
    unset($variables['page']['sidebar_first']);
    unset($variables['page']['sidebar_second']);
    unset($variables['page']['jix_horizontal_sidebar']);
    $variables['content_attributes']['class'] = ['main-content', 'col-md-12'];
  } else {
    $jix_both_sidebars_width = 'col-md-' . theme_get_setting('jix_both_sidebars_width');
    $jix_horizontal_sidebar_width = 'col-md-' . theme_get_setting('jix_horizontal_sidebar_width');
    $variables['jix_both_sidebars_attributes'] = ['class' => [$jix_both_sidebars_width]];
    $variables['jix_horizontal_sidebar_attributes'] = [
      'class' => ['jix_horizontal_sidebar', 'sidebar', $jix_horizontal_sidebar_width],
      'id' => ['jix_horizontal_sidebar'],
    ];
    $variables['content_attributes']['class'] = ['main-content', 'col-md-' . (12 - intval(theme_get_setting('jix_both_sidebars_width')))];
    $variables['jix_both_sidebars_attributes'] = new Attribute($variables['jix_both_sidebars_attributes']);
    $variables['jix_horizontal_sidebar_attributes'] = new Attribute($variables['jix_horizontal_sidebar_attributes']);
  }

  /*
   * This regex accepts paths like "/" only, or "/jobs/*" where *
   * is a word from a-z, no special character.
   */
  $variables['show_search_bar'] = false;
  $page_path = Drupal::request()->getPathInfo();
  if (Drupal::service('path.matcher')->isFrontPage() or preg_match('(\/jobs\/.*)', $page_path)) {
    $variables['show_search_bar'] = true;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function jix_core_theme_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id): void
{
  $form['#attributes']['class'][] = 'webform-client-form';
  if ($form['#id'] == 'views-exposed-form-jobs-display-page-search-result') {
    $form['filter_titles_field']['#attributes']['placeholder'] = t('Job title or company name. E.g tigo, ...');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function jix_core_theme_preprocess_form_element(&$variables): void
{
  if (array_key_exists('#name', $variables['element'])) {
    $elementName = $variables['element']['#name'];
    if ($elementName === 'filter_titles_field' or $elementName === 'field_job_category_target_id') {
      $variables['attributes']['class'][] = 'input-group-sm';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function jix_core_theme_preprocess_block(&$variables): void
{
  if ($variables['plugin_id'] == 'upload_cv_block') {
    $variables['attributes']['class'][] = 'col-12';
  }

  if ($variables['plugin_id'] == 'system_menu_block:jobs-tabs-menu') {
    $variables['#cache']['max-age'] = 0;
    $variables['attributes']['class'][] = 'mb-2';
  }

  if ($variables['plugin_id'] == 'job_summary_block') {
    $variables['attributes']['class'][] = 'p-0';
    $variables['attributes']['class'][] = 'border-0';
  }

  if ($variables['plugin_id'] == 'views_block:jobs_display-block_jobs_per_employer') {
    $variables['isJobsPerEmployer'] = true;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function jix_core_theme_preprocess_menu(&$variables)
{
  if (array_key_exists('menu_name', $variables) and $variables['menu_name'] == 'jobs-tabs-menu') {
    $featured = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_posting_plan', [
        'featured',
        'featured_custom',
        'featured_shortlist',
      ], 'IN')
      ->count();
    $featured_count = $featured->execute();

    $jobs = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_offer_type', 'job')
      ->count();
    $jobs_count = $jobs->execute();

    $tenders = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_offer_type', 'tender')
      ->count();
    $tenders_count = $tenders->execute();

    $consultancy = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_offer_type', 'consultancy')
      ->count();
    $consultancy_count = $consultancy->execute();

    $internship = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_offer_type', 'internship')
      ->count();
    $internship_count = $internship->execute();

    $publics = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_employer.entity.field_employer_public_service', 1)
      ->count();
    $publics_count = $publics->execute();

    $others = Drupal::entityQuery('node')
      ->condition('type', 'job')
      ->condition('status', 1)
      ->condition('field_job_offer_type', 'other')
      ->count();
    $others_count = $others->execute();

    $menu_values = [
      'view.jobs_display.page_featured' => $featured_count,
      'view.jobs_display.page_all_jobs' => $jobs_count,
      'view.jobs_display.page_tenders' => $tenders_count,
      'view.jobs_display.page_consultancies' => $consultancy_count,
      'view.jobs_display.page_internships' => $internship_count,
      'view.jobs_display.page_public_adverts' => $publics_count,
      'view.jobs_display.page_other_adverts' => $others_count,
    ];

    $variables['menu_values'] = $menu_values;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function jix_core_theme_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id): void
{
  unset($form['meta']);
  unset($form['menu']);
  if ($form['#form_id'] == 'node_job_form') {
    $form['field_job_employer']['widget'][0]['target_id']['#description'] =
      FieldFilteredMarkup::create("<a href='/node/add/employer'>" . t("Can't find an employer? Create one.") . "</a>");
  }
}

/**
 * Implements hook_theme().
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return string[][]
 */
function jix_core_theme_theme($existing, $type, $theme, $path): array
{
  return [
    'views_exposed_form__jobs_display__page_search_result_page' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 * @throws Exception
 */
function jix_core_theme_preprocess_file_link(&$variables): void
{
  $route_name = Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.node.canonical') {
    $job = Drupal::routeMatch()->getParameter('node');
    if ($job instanceof NodeInterface && $job->bundle() == 'job') {
      $variables['link']['#title'] = 'attachment_file_' . bin2hex(random_bytes(10));
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_region(&$variables): void
{
  $footer_regions = ['footer_first', 'footer_second', 'footer_third', 'footer_fourth', 'top_header_form'];
  if (in_array($variables['region'], $footer_regions)) {
    $variables['attributes']['class'] = [];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function jix_core_theme_preprocess_field(&$variables): void
{
  $banner_block = $variables['element']['#object'];
  if ($banner_block instanceof BlockContentInterface and $banner_block->bundle() == 'banner_block') {

    $imageClass = '';
    if ($banner_block->get('field_banner_type')->value === 'th') {
      $imageClass = 'pull-right';
    }
    $variables['image_class'] = $imageClass;

    $banner_img_location = $banner_block->get('field_banner_image_location');
    try {
      $banner_img_location_url = $banner_img_location->first();
      if ($banner_img_location_url instanceof LinkItemInterface) {
        $variables['banner_image_location_url'] = $banner_img_location_url->getUrl()->getUri();
      }
    } catch (MissingDataException $e) {
      Drupal::logger('jix_core_theme')->error('Missing Data: ' . $e->getMessage());
    }

    $banner_url_field = $banner_block->get('field_banner_url');
    try {
      $banner_url = $banner_url_field->first();
      if ($banner_url instanceof LinkItemInterface) {
        $variables['banner_url'] = $banner_url->getUrl()->getUri();
      }
    } catch (MissingDataException $e) {
      Drupal::logger('jix_core_theme')->error('Missing Data: ' . $e->getMessage());
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * @param $variables
 */
function jix_core_theme_preprocess_addtoany_standard(&$variables): void
{
  $route_name = Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.node.canonical') {
    $job = Drupal::routeMatch()->getParameter('node');
    if ($job instanceof NodeInterface && $job->bundle() == 'job') {
      $how_to_apply = $job->get('field_job_how_to_apply')->value;
      switch ($how_to_apply) {
        case 'email':
          $variables['apply_btn']['url'] = '/form/default-job-application-form?job_application_job=' . $job->id();
          $variables['apply_btn']['target'] = '_parent';
          break;
        case 'external_link':
          try {
            $url = $job->get('field_job_ext_application_link')->first();
            if ($url instanceof LinkItemInterface) {
              $variables['apply_btn']['url'] = $url->getUrl()->getUri();
              $variables['apply_btn']['target'] = '_blank';
            }
          } catch (MissingDataException $e) {
            Drupal::logger('jix_core_theme')->error('Missing Data: ' . $e->getMessage());
          }
          break;
        default:
          $variables['apply_btn'] = [];
          break;
      }
    }
  }
}

/**
 * Implements hook_js_settings_alter().
 * @param array $settings
 * @param AttachedAssetsInterface $assets
 */
function jix_core_theme_js_settings_alter(array &$settings, AttachedAssetsInterface $assets): void
{
  $settings['site']['target_country'] = Drupal::config(WebsiteSettingsForm::SETTINGS)->get('site_target_country');
  $settings['site']['stats_url'] = Drupal::config(WebsiteSettingsForm::SETTINGS)->get('stats_url');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function jix_core_theme_preprocess_views_view_unformatted(&$variables): void
{
  $view = $variables['view'];
  if ($view instanceof ViewExecutable && $view->current_display === 'page_search_result') {
    $reformatted_rows = [];
    foreach ($variables['rows'] as $row) {
      $result_row = $row['content']['#row'];
      if ($result_row instanceof ResultRow) {
        $view_builder = Drupal::entityTypeManager()->getViewBuilder('node');
        $job = $result_row->_entity;
        $pre_render = $view_builder->view($job, 'teaser');
        $reformatted_rows[] = ['content' => $pre_render, 'attributes' => $row['attributes']];
      }
    }
    $variables['rows'] = $reformatted_rows;
  }
}
